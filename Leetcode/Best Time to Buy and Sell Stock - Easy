You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

 

Constraints:

    1 <= prices.length <= 105
    0 <= prices[i] <= 104


Solution:
class Solution:
    def maxProfit(self, prices: List[int]) -> int:

    i = 0 #buy
        j = 1 #sell
        max_profit = 0
        while j < len(prices):
            profit = prices[j] - prices[i] #will be negative unless prices[i] < prices[j]
            if prices[i] < prices[j]:
                max_profit = max(profit, max_profit)
                print(max_profit)
            else:
                #needs to be i = j because of the while loop. we are only going to the end. so if we only increment by 1. 
                #i might not be far enough to see the max profit before j reaches the end of the prices 
                i = j
            j += 1
        return max_profit
